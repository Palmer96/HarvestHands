diff --git a/HH Prototype/Assets/Prefabs/Crafting Recipe/DirtRecipe.prefab b/HH Prototype/Assets/Prefabs/Crafting Recipe/DirtRecipe.prefab
index c4bd517..2c8ba6a 100644
Binary files a/HH Prototype/Assets/Prefabs/Crafting Recipe/DirtRecipe.prefab and b/HH Prototype/Assets/Prefabs/Crafting Recipe/DirtRecipe.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/DirtCybe.prefab b/HH Prototype/Assets/Prefabs/DirtCybe.prefab
new file mode 100644
index 0000000..59e5799
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/DirtCybe.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/DirtCybe.prefab.meta b/HH Prototype/Assets/Prefabs/DirtCybe.prefab.meta
new file mode 100644
index 0000000..9a464ba
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/DirtCybe.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 7628767684d3da94ea70bf66307821b1
+timeCreated: 1481668479
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/NPC.meta b/HH Prototype/Assets/Prefabs/NPC.meta
new file mode 100644
index 0000000..c752edc
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/NPC.meta	
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: ee428e6108e533b47b7f7b2fa18f2b2d
+folderAsset: yes
+timeCreated: 1487214797
+licenseType: Free
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/NPC/Bob.prefab b/HH Prototype/Assets/Prefabs/NPC/Bob.prefab
new file mode 100644
index 0000000..7e4ecc4
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/NPC/Bob.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/NPC/Bob.prefab.meta b/HH Prototype/Assets/Prefabs/NPC/Bob.prefab.meta
new file mode 100644
index 0000000..bd0d381
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/NPC/Bob.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: ad7b5c029b044b24282e38ff4eb07341
+timeCreated: 1487214815
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/NPC/Jimmy.prefab b/HH Prototype/Assets/Prefabs/NPC/Jimmy.prefab
new file mode 100644
index 0000000..3a0e328
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/NPC/Jimmy.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/NPC/Jimmy.prefab.meta b/HH Prototype/Assets/Prefabs/NPC/Jimmy.prefab.meta
new file mode 100644
index 0000000..5b0f980
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/NPC/Jimmy.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 056baa8b688b6584a9b76d939c570160
+timeCreated: 1487214817
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/NPC/Mountain Man.prefab b/HH Prototype/Assets/Prefabs/NPC/Mountain Man.prefab
new file mode 100644
index 0000000..adb383b
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/NPC/Mountain Man.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/NPC/Mountain Man.prefab.meta b/HH Prototype/Assets/Prefabs/NPC/Mountain Man.prefab.meta
new file mode 100644
index 0000000..78ea04d
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/NPC/Mountain Man.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 77329d4fbb15a624a874793dca805290
+timeCreated: 1487214805
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/NPC/Old Dan.prefab b/HH Prototype/Assets/Prefabs/NPC/Old Dan.prefab
new file mode 100644
index 0000000..6ef64cf
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/NPC/Old Dan.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/NPC/Old Dan.prefab.meta b/HH Prototype/Assets/Prefabs/NPC/Old Dan.prefab.meta
new file mode 100644
index 0000000..b284906
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/NPC/Old Dan.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 2fe88a126fa8daf4daf0e9725faebbb4
+timeCreated: 1487214806
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest.meta b/HH Prototype/Assets/Prefabs/Quest.meta
new file mode 100644
index 0000000..237e9ab
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest.meta	
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 6b104e0c425578b4aa2e36fd966d0d25
+folderAsset: yes
+timeCreated: 1487214659
+licenseType: Free
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/BuildASecondWall.prefab b/HH Prototype/Assets/Prefabs/Quest/BuildASecondWall.prefab
new file mode 100644
index 0000000..26efe4e
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/BuildASecondWall.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/BuildASecondWall.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/BuildASecondWall.prefab.meta
new file mode 100644
index 0000000..9e0b906
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/BuildASecondWall.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: e9ea71481994078459fc32bb65c4118e
+timeCreated: 1487214719
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/BuildAWall.prefab b/HH Prototype/Assets/Prefabs/Quest/BuildAWall.prefab
new file mode 100644
index 0000000..b1a7881
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/BuildAWall.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/BuildAWall.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/BuildAWall.prefab.meta
new file mode 100644
index 0000000..0af405f
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/BuildAWall.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 8753492b0e9436343bf25e29e29f55f9
+timeCreated: 1487214717
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/FarmForJimmy.prefab b/HH Prototype/Assets/Prefabs/Quest/FarmForJimmy.prefab
new file mode 100644
index 0000000..0aa57cd
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/FarmForJimmy.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/FarmForJimmy.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/FarmForJimmy.prefab.meta
new file mode 100644
index 0000000..50f2a0f
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/FarmForJimmy.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: e3b8b71df5593b04bb214bac45d27e66
+timeCreated: 1487214713
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/NoticeBobSenpai.prefab b/HH Prototype/Assets/Prefabs/Quest/NoticeBobSenpai.prefab
new file mode 100644
index 0000000..a9fc9a2
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/NoticeBobSenpai.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/NoticeBobSenpai.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/NoticeBobSenpai.prefab.meta
new file mode 100644
index 0000000..7eb6ec8
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/NoticeBobSenpai.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 658df25df97dcd744a079bbdc8587165
+timeCreated: 1487214716
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/Quest.prefab b/HH Prototype/Assets/Prefabs/Quest/Quest.prefab
new file mode 100644
index 0000000..e14140d
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/Quest.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/Quest.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/Quest.prefab.meta
new file mode 100644
index 0000000..76fa641
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/Quest.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: f5c140ce2e7c66445bca2e74818f1682
+timeCreated: 1486431767
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/QuestOffer.prefab b/HH Prototype/Assets/Prefabs/Quest/QuestOffer.prefab
new file mode 100644
index 0000000..17c0908
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/QuestOffer.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/QuestOffer.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/QuestOffer.prefab.meta
new file mode 100644
index 0000000..dd1e48e
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/QuestOffer.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: af6ec81049043d7438693299add0c6b8
+timeCreated: 1485996493
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/QuestOfferPrototype.prefab b/HH Prototype/Assets/Prefabs/Quest/QuestOfferPrototype.prefab
new file mode 100644
index 0000000..59dc78b
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/QuestOfferPrototype.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/QuestOfferPrototype.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/QuestOfferPrototype.prefab.meta
new file mode 100644
index 0000000..da908cb
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/QuestOfferPrototype.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 17471a8778243004fbfc95ca208c79ac
+timeCreated: 1486429458
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Prefabs/Quest/TalkToMountain.prefab b/HH Prototype/Assets/Prefabs/Quest/TalkToMountain.prefab
new file mode 100644
index 0000000..3b212e9
Binary files /dev/null and b/HH Prototype/Assets/Prefabs/Quest/TalkToMountain.prefab differ
diff --git a/HH Prototype/Assets/Prefabs/Quest/TalkToMountain.prefab.meta b/HH Prototype/Assets/Prefabs/Quest/TalkToMountain.prefab.meta
new file mode 100644
index 0000000..e722023
--- /dev/null
+++ b/HH Prototype/Assets/Prefabs/Quest/TalkToMountain.prefab.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: ab1fe1a24b23b084cbbbcb165d7245c3
+timeCreated: 1487214714
+licenseType: Free
+NativeFormatImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/Conversation.cs b/HH Prototype/Assets/Scripts/Conversation.cs
new file mode 100644
index 0000000..e127b19
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/Conversation.cs	
@@ -0,0 +1,243 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class Conversation : MonoBehaviour
+{
+    public static Conversation instance = null;
+    public VIDE_Data dialogue; //Reference to conversation info
+    GameObject otherObj; //What you're talking to
+
+    public UnityEngine.UI.Text npcText;
+    public UnityEngine.UI.Text npcName;
+    public UnityEngine.UI.Text playerText;
+    public GameObject itemText;
+    public GameObject uiContainer;
+
+    bool animatingText = false; //Is text currently animating
+
+    //We'll be using this to store the current player dialogue options
+    private List<UnityEngine.UI.Text> currentOptions = new List<UnityEngine.UI.Text>();
+
+    
+    public Color highlightedOptionColor = Color.green;
+    public Color unhighlightedOptionColor = Color.black;
+
+    public KeyCode GoUpOptionKey = KeyCode.W;
+    public KeyCode GoDownOptionKey = KeyCode.S;
+
+
+
+    // Use this for initialization
+    void Start ()
+    {
+        if (instance == null)
+            instance = this;
+        else
+            Destroy(this);
+
+        dialogue = gameObject.AddComponent<VIDE_Data>();
+    }
+	
+	// Update is called once per frame
+	void Update ()
+    {
+        var data = dialogue.nodeData;
+
+        //disable the entire UI if there aren't any loaded conversations
+        if (!dialogue.isLoaded)
+        {
+            uiContainer.SetActive(false);
+        }
+        else
+        {
+            uiContainer.SetActive(true);
+
+            //Player-NPC conversation text will be visible depending on whose turn it is
+            playerText.transform.parent.gameObject.SetActive(data.currentIsPlayer);
+            npcText.transform.parent.gameObject.SetActive(!data.currentIsPlayer);
+
+            //Color the Player options. Blue for the selected one
+            for (int i = 0; i < currentOptions.Count; i++)
+            {
+                currentOptions[i].color = unhighlightedOptionColor;
+                if (i == data.selectedOption) currentOptions[i].color = highlightedOptionColor;
+            }
+
+            //Scroll through Player dialogue options
+            if (!data.pausedAction)
+            {
+                if (Input.GetKeyDown(GoDownOptionKey))
+                {
+                    if (data.selectedOption < currentOptions.Count - 1)
+                        data.selectedOption++;
+                }
+                if (Input.GetKeyDown(GoUpOptionKey))
+                {
+                    if (data.selectedOption > 0)
+                        data.selectedOption--;
+                }
+            }
+        }
+    }
+
+    public void BeginConversation(VIDE_Assign diagToLoad, int startNode = -1)
+    {
+        //First step is to call BeginDialogue, passing the required VIDE_Assign component 
+        //This will store the first Node data in dialogue.nodeData
+        dialogue.BeginDialogue(diagToLoad);
+        PlayerInventory.instance.transform.GetComponent<UnityStandardAssets.Characters.FirstPerson.FirstPersonController>().enabled = false;
+
+        //if given a node to start on
+        if (startNode != -1)
+            dialogue.SetNode(startNode);
+
+        var data = dialogue.nodeData;
+
+        //Safety check in case a null dialogue was sent
+        if (dialogue.assigned == null)
+        {
+            dialogue.EndDialogue();
+            PlayerInventory.instance.transform.GetComponent<UnityStandardAssets.Characters.FirstPerson.FirstPersonController>().enabled = true;
+            return;
+        }
+
+        //Let's clean the NPC text variables
+        npcText.text = "";
+        npcName.text = "";
+
+        ////Let's specifically check for dynamic text change
+        //if (!data.currentIsPlayer && data.extraData == "itemLookUp")
+        //    ItemLookUp(data);
+
+        //Everytime dialogue.nodeData gets updated, we update our UI with the new data
+        UpdateUI();
+    }
+
+    //This will handle what happens when we want next message to appear 
+    //(Also called by examplePlayer script)
+    public void NextNode()
+    {
+        var data = dialogue.nodeData;
+
+        //Let's not go forward if text is currently being animated, but let's speed it up.
+        if (animatingText) { animatingText = false; return; }
+
+        ////Check to see if there's extraData and if so, we do stuff
+        //if (!data.currentIsPlayer && data.extraData != "" && !data.pausedAction)
+        //{
+        //    bool needsReturn = DoAction(data);
+        //    if (needsReturn)
+        //    {
+        //        UpdateUI();
+        //        return;
+        //    }
+        //}
+
+        ////Let's specifically check for dynamic text change
+        //if (!data.currentIsPlayer && data.extraData == "itemLookUp" && !data.pausedAction)
+        //    ItemLookUp(data);
+
+        //This will update the dialogue.nodeData with the next Node's data
+        dialogue.Next();
+
+        UpdateUI();
+    }
+
+
+    public void UpdateUI()
+    {
+        //VIDE_Data.nodeData is all we need to retrieve data
+        var data = dialogue.nodeData;
+
+        //VIDE provides a bool variable that will turn TRUE when we attempt to call Next() on a node that leads to nowhere.
+        //You are free to end the conversation whenever you desire. Just read the variable and call EndDialogue() on the VIDE_Data.
+        if (data.isEnd)
+        {
+            //This is called when we have reached the end of the conversation
+            dialogue.EndDialogue(); //VIDE_Data will get reset along with nodeData.
+            PlayerInventory.instance.transform.GetComponent<UnityStandardAssets.Characters.FirstPerson.FirstPersonController>().enabled = true;
+            return;
+        }
+
+        //If this new Node is a Player Node, set the selectable comments offered by the Node
+        if (data.currentIsPlayer)
+        {
+            SetOptions(data.playerComments);
+        }
+        //If it's an NPC Node, let's just update NPC's text
+        else
+        {
+            if (data.npcComment.Length > 0)
+                if (npcText.text != data.npcComment[data.npcCommentIndex])
+                {
+                    npcText.text = "";
+                    StartCoroutine(AnimateText());
+                }
+
+            npcName.text = data.tag;
+            //if (otherObj != null)
+            //    if (otherObj.GetComponent<NPC>() != null)
+            //        npcName.text = otherObj.GetComponent<NPC>().npcName;
+        }
+    }
+
+    //This uses the returned string[] from nodeData.playerComments to create the UIs for each comment
+    //It first cleans, then it instantiates new options
+    public void SetOptions(string[] opts)
+    {
+        //Destroy the current options
+        foreach (UnityEngine.UI.Text op in currentOptions)
+            Destroy(op.gameObject);
+
+        //Clean the variable
+        currentOptions = new List<UnityEngine.UI.Text>();
+
+        //Create the options
+        for (int i = 0; i < opts.Length; i++)
+        {
+            //This is just one way of creating endless options for Unity's UI class
+            //Normally, you'd have an absolute number of options and you wouldn't have the need of doing this
+            GameObject newOp = Instantiate(playerText.gameObject, playerText.transform.position, Quaternion.identity) as GameObject;
+            newOp.SetActive(true);
+            newOp.transform.SetParent(playerText.transform.parent, true);
+            newOp.GetComponent<RectTransform>().anchoredPosition = new Vector2(0, 20 - (20 * i));
+            newOp.GetComponent<UnityEngine.UI.Text>().text = opts[i];
+            currentOptions.Add(newOp.GetComponent<UnityEngine.UI.Text>());
+        }
+    }
+
+    //This will replace any "[NAME]" with the name of the gameobject holding the VIDE_Assign
+    void ItemLookUp(VIDE_Data.NodeData data)
+    {
+        if (data.npcCommentIndex == 0)
+        {
+            data.npcComment[data.npcCommentIndex] = data.npcComment[data.npcCommentIndex].Replace("[NAME]", dialogue.assigned.gameObject.name);
+        }
+    }
+
+    //Very simple text animation, not optimal
+    //Use StringBuilder for better performance
+    public IEnumerator AnimateText()
+    {
+
+        var data = dialogue.nodeData;
+        animatingText = true;
+        string c = data.npcComment[data.npcCommentIndex];
+
+        if (!data.currentIsPlayer)
+        {
+            while (npcText.text != c)
+            {
+                if (!animatingText) break;
+                string letterToAdd = c[npcText.text.Length].ToString();
+                npcText.text += letterToAdd; //Actual text updates here
+                yield return new WaitForSeconds(0.02f);
+            }
+        }
+
+        npcText.text = data.npcComment[data.npcCommentIndex]; //And here		
+        animatingText = false;
+    }
+
+}
diff --git a/HH Prototype/Assets/Scripts/Conversation.cs.meta b/HH Prototype/Assets/Scripts/Conversation.cs.meta
new file mode 100644
index 0000000..a43eaf5
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/Conversation.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 7a322f7b776708540bbbd84998a9aa35
+timeCreated: 1486446283
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/CraftingBench.cs b/HH Prototype/Assets/Scripts/CraftingBench.cs
new file mode 100644
index 0000000..f450f30
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingBench.cs	
@@ -0,0 +1,128 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+using UnityEngine.UI;
+
+public class CraftingBench : MonoBehaviour
+{
+    public int currentlySelceted = 0;
+    public TextMesh recipeNameText;
+    public TextMesh recipeRequirementsText;
+    public List<Item> loadedResources = new List<Item>();
+    public Transform spawnPoint;
+       
+
+	// Use this for initialization
+	void Start ()
+    {
+        Invoke("DisplayRecipeChoice", .1f);
+        //Debug.Log("Recipes = " + CraftingManager.instance.knownRecipes.Count);
+        //NextRecipeChoice();
+
+    }	
+
+ //  void OnTriggerEnter(Collider col)
+ //  {
+ //      Item item = col.GetComponent<Item>();
+ //      if (item != null)
+ //      {
+ //          //Check if some of the item is stored already
+ //          foreach (Item storedItem in loadedResources)
+ //          {
+ //              if (item.itemID == storedItem.itemID)
+ //              {
+ //                  storedItem.quantity += item.quantity;
+ //                  Destroy(item.gameObject);
+ //                  DisplayRecipeChoice();
+ //                  return;
+ //              }
+ //          }
+ //          //if not already stored add to list
+ //          loadedResources.Add(item);
+ //          item.gameObject.SetActive(false);
+ //          DisplayRecipeChoice();
+ //          //Destroy(item.gameObject);
+ //      }
+ //  }
+
+
+    public void DisplayRecipeChoice()
+    {
+        if (CraftingManager.instance.knownRecipes.Count < 1)
+            return;
+
+        recipeNameText.text = CraftingManager.instance.knownRecipes[currentlySelceted].recipeName;
+        string recipeRequirements = "";
+        //Hopefully make text show as "0/10 Wood" if you have 0 wood and the recipe reqires 10 wood
+        //And do a resource per line
+        foreach (CraftingManager.ResourceRequirement requirement in CraftingManager.instance.knownRecipes[currentlySelceted].requiredItems)
+        {
+            int sameResourceLoaded = 0;
+            foreach (Item loadedItem in loadedResources)
+            {
+                if (loadedItem.itemName == requirement.resourceName)
+                {
+                    sameResourceLoaded += loadedItem.quantity;
+                }
+            }
+            recipeRequirements += sameResourceLoaded.ToString() + "/" + requirement.numRequired.ToString() + " " + requirement.resourceName + "\n"; 
+        }
+        recipeRequirementsText.text = recipeRequirements;
+    }
+
+    public void NextRecipeChoice()
+    {
+        currentlySelceted++;
+        if (currentlySelceted >= CraftingManager.instance.knownRecipes.Count)
+            currentlySelceted = 0;
+        DisplayRecipeChoice();
+    }
+
+    public void PreviousRecipeChocie()
+    {
+        currentlySelceted--;
+        if (currentlySelceted < 0)
+            currentlySelceted = CraftingManager.instance.knownRecipes.Count -1;
+        DisplayRecipeChoice();
+    }
+
+    public void MakeItem()
+    {
+        if (CraftingManager.instance.knownRecipes.Count == 0)
+            return;
+        foreach (CraftingManager.ResourceRequirement requirement in CraftingManager.instance.knownRecipes[currentlySelceted].requiredItems)
+        {
+            bool hasItem = false;
+            foreach (Item loadedItem in loadedResources)
+            {
+                //If have the item
+                if (loadedItem.itemName == requirement.resourceName)
+                {
+                    hasItem = true;
+                    //If dont have enough, return
+                    if (loadedItem.quantity < requirement.numRequired)
+                    {
+                        return;
+                    }
+                }
+            }
+            //If have 0 of the resources
+            if (hasItem == false)
+                return;
+        }
+        //remove requirements
+        foreach (CraftingManager.ResourceRequirement requirement in CraftingManager.instance.knownRecipes[currentlySelceted].requiredItems)
+        {
+            foreach (Item loadedItem in loadedResources)
+            {
+                if (loadedItem.itemName == requirement.resourceName)
+                {
+                    loadedItem.quantity -= requirement.numRequired;                    
+                }
+            }
+        }
+        GameObject newObject = (GameObject)Instantiate(CraftingManager.instance.knownRecipes[currentlySelceted].result, spawnPoint.position, Quaternion.identity);
+        //Update sign with new reduced resources
+        DisplayRecipeChoice();
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/CraftingBench.cs.meta b/HH Prototype/Assets/Scripts/CraftingBench.cs.meta
new file mode 100644
index 0000000..8867640
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingBench.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d76816a06640b8f45827b7aca2a794e0
+timeCreated: 1486608589
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/CraftingBenchButton.cs b/HH Prototype/Assets/Scripts/CraftingBenchButton.cs
new file mode 100644
index 0000000..ead0ee3
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingBenchButton.cs	
@@ -0,0 +1,25 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class CraftingBenchButton : MonoBehaviour
+{
+    public enum ButtonType
+    {
+        Next = 0,
+        Previous = 1,
+    }
+    public CraftingBench bench;
+
+    public ButtonType type = ButtonType.Next;
+
+    public void ActivateButton()
+    {
+        if (bench == null)
+            return;
+        if (type == ButtonType.Next)
+            bench.NextRecipeChoice();
+        else
+            bench.PreviousRecipeChocie();
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/CraftingBenchButton.cs.meta b/HH Prototype/Assets/Scripts/CraftingBenchButton.cs.meta
new file mode 100644
index 0000000..034654e
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingBenchButton.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a86caf3828b6ae14e81397ef434eb42b
+timeCreated: 1486619859
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/CraftingManager.cs b/HH Prototype/Assets/Scripts/CraftingManager.cs
new file mode 100644
index 0000000..4767852
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingManager.cs	
@@ -0,0 +1,32 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class CraftingManager : MonoBehaviour
+{
+    [System.Serializable]
+    public class ResourceRequirement
+    {
+        public string resourceName = "";
+        public int numRequired = 0;
+    }
+
+    public static CraftingManager instance = null;
+    public List<CraftingRecipe> knownRecipes = new List<CraftingRecipe>();
+    
+	// Use this for initialization
+	void Start ()
+    {
+        if (instance == null)
+            instance = this;
+        else
+            Destroy(this);
+	}
+	
+	// Update is called once per frame
+	void Update ()
+    {
+        //Debug.Log("crafting manager is on " + gameObject.name);
+	}        
+
+}
diff --git a/HH Prototype/Assets/Scripts/CraftingManager.cs.meta b/HH Prototype/Assets/Scripts/CraftingManager.cs.meta
new file mode 100644
index 0000000..3816310
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingManager.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5984dfec3c02daf4fb73da36736c1ea0
+timeCreated: 1486608034
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/CraftingMenu.cs b/HH Prototype/Assets/Scripts/CraftingMenu.cs
new file mode 100644
index 0000000..7f919f8
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingMenu.cs	
@@ -0,0 +1,233 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+using UnityEngine.UI;
+
+public class CraftingMenu : MonoBehaviour
+{
+    public enum DisplayItemType
+    {
+        Default = -1,
+        ALL = 0,
+        TOOLS = 1,
+        BUILDINGS = 2,
+    }
+    public static CraftingMenu instance = null;
+
+    public DisplayItemType currentRecipeType = DisplayItemType.ALL;
+
+    public GameObject recipeListButtonPrefab;
+    public Transform scrollView;
+    public Transform contentPanel;
+    public GameObject craftButton;
+    public GameObject returnButton;
+    public Color sufficientResourceColour = Color.green;
+    public Color insufficientResourceColour = Color.gray;
+    public Color canMakeColor = Color.green;
+    public Color cantMakeColor = Color.grey;
+    public CraftingMenuButton selectedButton = null;
+    public List<CraftingMenuButton> craftingButtons = new List<CraftingMenuButton>();
+
+    public Text selectedItemName;
+    public Text selectedItemDescription;
+    public Text selectedItemResources;
+    public RawImage background;
+
+
+    public List<CraftingRecipe> recipes = new List<CraftingRecipe>();
+    private List<CraftingRecipe> haveResourceList = new List<CraftingRecipe>();
+    private List<CraftingRecipe> dontHaveResourceList = new List<CraftingRecipe>();
+
+    // Use this for initialization
+    void Start()
+    {
+        if (instance == null)
+            instance = this;
+        else
+            Destroy(this);
+    }
+
+
+    public List<CraftingRecipe> GetRecipeList()
+    {
+        if (currentRecipeType == DisplayItemType.ALL)
+            return CraftingManager.instance.knownRecipes;
+        else if (currentRecipeType == DisplayItemType.TOOLS)
+        {
+            foreach (CraftingRecipe recipe in CraftingManager.instance.knownRecipes)
+            {
+                if (recipe.recipeType == CraftingRecipe.RecipeType.TOOL)
+                {
+                    //add to list
+                }
+            }
+        }
+        //else if (currentRecipeType == DisplayItemType.BUILDINGS)
+        //    return buildingRecipes;
+
+
+        return recipes;
+    }
+
+    public void SetDisplayRecipeType(DisplayItemType type)
+    {
+        currentRecipeType = type;
+        GetRecipeList();
+    }
+
+    public void UpdateDisplay()
+    {
+        foreach (CraftingMenuButton button in craftingButtons)
+        {
+            button.UpdateDisplay();
+        }
+    }
+
+    public void ResetDisplay()
+    {
+        RemoveButtons();
+        AddButtons(CraftingManager.instance.knownRecipes);
+        //UpdateDisplay();
+    }
+
+    public void ActivateMenu()
+    {
+        Debug.Log("Inside ActivateMenu");
+        scrollView.gameObject.SetActive(true);
+        PlayerInventory.instance.enabled = false;
+        PlayerInventory.instance.transform.GetComponent<UnityStandardAssets.Characters.FirstPerson.FirstPersonController>().enabled = false;
+        Cursor.visible = true;
+        Cursor.lockState = CursorLockMode.None;
+        craftButton.SetActive(true);
+        returnButton.SetActive(true);
+        background.gameObject.SetActive(true);
+        selectedItemName.gameObject.SetActive(true);
+        selectedItemDescription.gameObject.SetActive(true);
+        selectedItemResources.gameObject.SetActive(true);
+        ResetDisplay();
+        SelectButton(0);
+    }
+
+    public void DeactivateMenu()
+    {
+        scrollView.gameObject.SetActive(false);
+        PlayerInventory.instance.enabled = true;
+        PlayerInventory.instance.transform.GetComponent<UnityStandardAssets.Characters.FirstPerson.FirstPersonController>().enabled = true;
+        Cursor.visible = false;
+        Cursor.lockState = CursorLockMode.Locked;
+        craftButton.SetActive(false);
+        returnButton.SetActive(false);
+        background.gameObject.SetActive(false);
+        selectedItemName.gameObject.SetActive(false);
+        selectedItemDescription.gameObject.SetActive(false);
+        selectedItemResources.gameObject.SetActive(false);
+    }
+
+    public void SelectButton(int i)
+    {
+        if (i < CraftingManager.instance.knownRecipes.Count)
+        {
+            craftingButtons[i].UpdateSelectedButton();
+        }
+        UpdateSelectedItemInfo();
+    }
+
+
+    public void UpdateSelectedItemInfo()
+    {
+        selectedItemName.text = selectedButton.recipe.recipeName;
+        selectedItemDescription.text = selectedButton.recipe.itemDescription;
+        selectedItemResources.text = selectedButton.requirementText.text;
+    }
+
+    public void AddButtons(List<CraftingRecipe> recipes)
+    {
+        haveResourceList = new List<CraftingRecipe>();
+        dontHaveResourceList = new List<CraftingRecipe>();
+        int recipeIndex = 0;
+        //Sort alphabetically
+        recipes.Sort(delegate (CraftingRecipe a, CraftingRecipe b)
+        {
+            return a.recipeName.CompareTo(b.recipeName);
+        }
+        );
+        //Sort to have resource and dont have resources
+        foreach (CraftingRecipe recipe in CraftingManager.instance.knownRecipes)
+        {
+            if (recipe.HaveResources())
+                haveResourceList.Add(recipe);
+            else
+                dontHaveResourceList.Add(recipe);
+        }        
+        //create ui buttons for each
+        foreach (CraftingRecipe recipe in haveResourceList)
+        {
+            GameObject menuButton = Instantiate(recipeListButtonPrefab);
+            CraftingMenuButton craftingButton = menuButton.GetComponent<CraftingMenuButton>();
+            menuButton.transform.SetParent(contentPanel);
+            craftingButtons.Add(craftingButton);
+            craftingButton.recipeIndex = recipeIndex;
+            recipeIndex++;
+            craftingButton.recipe = recipe;
+
+            craftingButton.UpdateDisplay();
+        }
+        foreach (CraftingRecipe recipe in dontHaveResourceList)
+        {
+            GameObject menuButton = Instantiate(recipeListButtonPrefab);
+            CraftingMenuButton craftingButton = menuButton.GetComponent<CraftingMenuButton>();
+            menuButton.transform.SetParent(contentPanel);
+            craftingButtons.Add(craftingButton);
+            craftingButton.recipeIndex = recipeIndex;
+            recipeIndex++;
+            craftingButton.recipe = recipe;
+
+            craftingButton.UpdateDisplay();
+        }
+    }
+
+    public void RemoveButtons()
+    {
+        while (craftingButtons.Count > 0)
+        {
+            Destroy(craftingButtons[0].gameObject);
+            craftingButtons.RemoveAt(0);
+        }
+    }
+
+    public void CreateSelectedItem()
+    {
+        if (selectedButton == null)
+            return;
+        //PlayerInventory.instance.AddItem(selectedButton.recipe.Craft());
+        GameObject newObj = selectedButton.recipe.Craft();
+        if (newObj != null)
+            PlayerInventory.instance.AddItem(newObj);
+        //CraftingManager.instance.knownRecipes[selectedButton.recipeIndex].Craft();
+        ResortLists();
+        UpdateDisplay(); // TODO Change this so it updates the list objects with the reduced player amounts, instead of destroying and recreating the entire list
+    }
+
+    public void ResortLists()
+    {
+        Debug.Log("In resort Lists");
+        List<CraftingMenuButton> haveResourceButtonList = new List<CraftingMenuButton>();
+        List<CraftingMenuButton> dontHaveResourceButtonList = new List<CraftingMenuButton>();
+
+        foreach (CraftingMenuButton menuButton in craftingButtons)
+        {
+            if (menuButton.recipe.HaveResources())
+                haveResourceButtonList.Add(menuButton);
+            else
+                dontHaveResourceButtonList.Add(menuButton);
+        }
+        for (int i = dontHaveResourceButtonList.Count; i > 0; --i)
+        {
+            dontHaveResourceButtonList[i - 1].transform.SetSiblingIndex(0);
+        }
+        for (int i = haveResourceButtonList.Count; i > 0; --i)
+        {
+            haveResourceButtonList[i - 1].transform.SetSiblingIndex(0);
+        }
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/CraftingMenu.cs.meta b/HH Prototype/Assets/Scripts/CraftingMenu.cs.meta
new file mode 100644
index 0000000..638aeb9
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingMenu.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 87d56df8ac1be0944a838c47443d23d3
+timeCreated: 1486683210
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/CraftingMenuButton.cs b/HH Prototype/Assets/Scripts/CraftingMenuButton.cs
new file mode 100644
index 0000000..5e6e03d
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingMenuButton.cs	
@@ -0,0 +1,91 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+using UnityEngine.UI;
+
+public class CraftingMenuButton : MonoBehaviour
+{
+    public int recipeIndex = -1;
+    public Button button;
+    public Text nameText;
+    public Text requirementText;
+    public Image iconImage;
+    public CraftingMenu craftingMenu;
+    public CraftingRecipe recipe;
+
+	// Use this for initialization
+	void Start () {
+		
+	}
+	
+	// Update is called once per frame
+	public void UpdateSelectedButton ()
+    {
+        if (CraftingMenu.instance.selectedButton != null)
+            CraftingMenu.instance.selectedButton.UnselectButton();
+        CraftingMenu.instance.selectedButton = this;
+        CraftingMenu.instance.UpdateSelectedItemInfo();
+        SelectButton();
+	}
+
+    public void UnselectButton()
+    {
+        nameText.text = recipe.recipeName;
+    }
+
+    public void SelectButton()
+    {
+        nameText.text = "-> " + recipe.recipeName + " <-";
+    }
+
+    public void UpdateDisplay()
+    {
+        string recipeName = "";
+        string recipeResources = "";
+        if (CraftingMenu.instance.selectedButton == this)
+        {
+            recipeName += "-> " + recipe.recipeName + " <-";
+        }
+        else
+            recipeName = recipe.recipeName;
+        bool hasResource = true;
+
+        foreach (CraftingManager.ResourceRequirement requirement in recipe.requiredItems)
+        {
+            int haveAmount = 0;
+            recipeResources += requirement.numRequired + requirement.resourceName + ", ";
+
+            foreach (GameObject heldItem in PlayerInventory.instance.heldObjects)
+            {
+                if (heldItem == null)
+                    continue;
+                Item item = heldItem.GetComponent<Item>();
+                if (item == null)
+                    continue;
+                if (item.itemName == requirement.resourceName)
+                {
+                    haveAmount += item.quantity;
+
+                    if (haveAmount >= requirement.numRequired)
+                        break;
+                }
+            }
+            if (haveAmount < requirement.numRequired)
+                hasResource = false;
+
+        }
+        //Display list prefab thing
+        nameText.text = recipeName;
+        requirementText.text = recipeResources;
+        if (hasResource)
+        {
+            nameText.color = CraftingMenu.instance.canMakeColor;
+            requirementText.color = CraftingMenu.instance.sufficientResourceColour;
+        }
+        else
+        {
+            nameText.color = CraftingMenu.instance.cantMakeColor;
+            requirementText.color = CraftingMenu.instance.insufficientResourceColour;
+        }
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/CraftingMenuButton.cs.meta b/HH Prototype/Assets/Scripts/CraftingMenuButton.cs.meta
new file mode 100644
index 0000000..69b8097
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingMenuButton.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b97a097cc1b4b2640abb1bfa944c1b2d
+timeCreated: 1486960275
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/CraftingRecipe.cs b/HH Prototype/Assets/Scripts/CraftingRecipe.cs
new file mode 100644
index 0000000..02089b4
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingRecipe.cs	
@@ -0,0 +1,116 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class CraftingRecipe : MonoBehaviour
+{
+    public enum RecipeType
+    {
+        UNASSIGNED = 0,
+        TOOL = 1,
+        CONSTRUCT = 2,
+        RESOURCE = 3,
+    }
+    public RecipeType recipeType = RecipeType.UNASSIGNED;
+    public string recipeName = "";
+    public GameObject result;
+    public string itemDescription = "";
+    public List<CraftingManager.ResourceRequirement> requiredItems = new List<CraftingManager.ResourceRequirement>();
+
+	// Use this for initialization
+	void Start ()
+    {
+        if (result == null)
+            Debug.Log(name + " has no result for it's CraftingRecipe");
+	}
+
+    public GameObject Craft()
+    {
+        foreach (CraftingManager.ResourceRequirement requirement in requiredItems)
+        {
+            bool hasItem = false;
+            foreach (GameObject loadedObject in PlayerInventory.instance.heldObjects)
+            {
+                if (loadedObject == null)
+                    continue;
+                Item loadedItem = loadedObject.GetComponent<Item>();
+                if (loadedItem == null)
+                    return null;
+
+                //If have the item
+                if (loadedItem.itemName == requirement.resourceName)
+                {
+                    hasItem = true;
+                    //If dont have enough, return
+                    if (loadedItem.quantity < requirement.numRequired)
+                    {
+                        return null;
+                    }
+                }
+            }
+            //If have 0 of the resources
+            if (hasItem == false)
+                return null;
+        }
+        //remove requirements
+        foreach (CraftingManager.ResourceRequirement requirement in requiredItems)
+        {
+            foreach (GameObject loadedObject in PlayerInventory.instance.heldObjects)
+            {
+                if (loadedObject == null)
+                    continue;
+                Item loadedItem = loadedObject.GetComponent<Item>();
+                if (loadedItem.itemName == requirement.resourceName)
+                {
+                    loadedItem.quantity -= requirement.numRequired;
+                    if (loadedItem.quantity == 0)
+                    {
+                        Destroy(loadedItem.gameObject);
+                        loadedItem = null;
+                    }
+                }
+            }
+        }
+        GameObject newObject = (GameObject)Instantiate(result, PlayerInventory.instance.transform.position + new Vector3(0, 1, 0), Quaternion.identity);
+        return newObject;
+    }
+
+    public bool HaveResources()
+    {
+        foreach (CraftingManager.ResourceRequirement requirement in requiredItems)
+        {
+            int haveAmount = 0;
+            bool hasItem = false;
+            foreach (GameObject loadedObject in PlayerInventory.instance.heldObjects)
+            {
+                if (loadedObject == null)
+                    continue;
+                Item loadedItem = loadedObject.GetComponent<Item>();
+                if (loadedItem == null)
+                    continue;
+
+                //If have the item
+                if (loadedItem.itemName == requirement.resourceName)
+                {
+                    hasItem = true;                    
+                    if (loadedItem.quantity < requirement.numRequired)
+                    {
+                        haveAmount += loadedItem.quantity;
+                    }
+                    //check if have enough
+                    if (haveAmount >= requirement.numRequired)
+                    {
+                        hasItem = true;
+                        break;
+                    }
+                }
+            }
+            //If have 0 of the resources
+            if (hasItem == false)
+                return false;
+        }
+        return true;
+    }
+    
+    
+}
diff --git a/HH Prototype/Assets/Scripts/CraftingRecipe.cs.meta b/HH Prototype/Assets/Scripts/CraftingRecipe.cs.meta
new file mode 100644
index 0000000..5f69b63
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/CraftingRecipe.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2679092d2478b3d4586064842774ca71
+timeCreated: 1486608027
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/PrototypeConstructObjective.cs b/HH Prototype/Assets/Scripts/PrototypeConstructObjective.cs
new file mode 100644
index 0000000..02a607f
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypeConstructObjective.cs	
@@ -0,0 +1,36 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class PrototypeConstructObjective : QuestProtoypeObjective
+{
+
+    public string constructName = "WhatToBuild";
+    public int goalAmount = 1;
+    public int currentAmount = 0;
+
+    public override void ActivateObjective()
+    {
+        Debug.Log("Activating construct objective");
+        EventManager.OnConstruct += CheckComplete;
+    }
+
+    public override void DectivateObjective()
+    {
+        EventManager.OnConstruct -= CheckComplete;
+    }
+
+    void CheckComplete(string buildingName)
+    {
+        if (constructName == buildingName)
+        {
+            currentAmount++;
+            if (currentAmount >= goalAmount)
+            {
+                objectiveDone = true;
+                Debug.Log(currentAmount + "/" + goalAmount + " " + constructName + " constructed!");
+                PrototypeQuestManager.UpdateQuests();
+            }
+        }
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/PrototypeConstructObjective.cs.meta b/HH Prototype/Assets/Scripts/PrototypeConstructObjective.cs.meta
new file mode 100644
index 0000000..ca31c22
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypeConstructObjective.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 87de69465f375cc439b54e49fd3f69fa
+timeCreated: 1486597519
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/PrototypePrerequisiteArousal.cs b/HH Prototype/Assets/Scripts/PrototypePrerequisiteArousal.cs
new file mode 100644
index 0000000..ddc3682
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypePrerequisiteArousal.cs	
@@ -0,0 +1,16 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class PrototypePrerequisiteArousal : PrototypeQuestPrerequisite
+{
+    public NPC npc;
+    public int arousalRequirement = 0;
+
+    public override bool CheckPrerequisiteMet()
+    {
+        //Debug.Log("Inside overrided check prerequesites met");
+        //Debug.Log((arousalRequirement >= npc.arousalValue).ToString() + "arousal requirements >= npc.arousal value " + arousalRequirement.ToString() + " >= " + npc.arousalValue.ToString());
+        return (npc.arousalValue >= arousalRequirement);
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/PrototypePrerequisiteArousal.cs.meta b/HH Prototype/Assets/Scripts/PrototypePrerequisiteArousal.cs.meta
new file mode 100644
index 0000000..3d87881
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypePrerequisiteArousal.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 07af1c8557d560e4abed7dc2fc92760c
+timeCreated: 1487116118
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/PrototypePrerequisiteQuest.cs b/HH Prototype/Assets/Scripts/PrototypePrerequisiteQuest.cs
new file mode 100644
index 0000000..ea3e865
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypePrerequisiteQuest.cs	
@@ -0,0 +1,13 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class PrototypePrerequisiteQuest : PrototypeQuestPrerequisite
+{
+    public Quest quest;
+
+    public override bool CheckPrerequisiteMet()
+    {
+        return quest.questComplete;
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/PrototypePrerequisiteQuest.cs.meta b/HH Prototype/Assets/Scripts/PrototypePrerequisiteQuest.cs.meta
new file mode 100644
index 0000000..a294fed
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypePrerequisiteQuest.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 52085ed1401cf994f99750427b81c4d9
+timeCreated: 1487115971
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/Scripts/PrototypeQuestPrerequisite.cs b/HH Prototype/Assets/Scripts/PrototypeQuestPrerequisite.cs
new file mode 100644
index 0000000..4209583
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypeQuestPrerequisite.cs	
@@ -0,0 +1,11 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class PrototypeQuestPrerequisite : MonoBehaviour
+{  
+    public virtual bool CheckPrerequisiteMet()
+    {
+        return true;
+    }
+}
diff --git a/HH Prototype/Assets/Scripts/PrototypeQuestPrerequisite.cs.meta b/HH Prototype/Assets/Scripts/PrototypeQuestPrerequisite.cs.meta
new file mode 100644
index 0000000..228aa0d
--- /dev/null
+++ b/HH Prototype/Assets/Scripts/PrototypeQuestPrerequisite.cs.meta	
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2c58e3acbdef14e49aff55779a5deebb
+timeCreated: 1487115873
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/HH Prototype/Assets/VIDE/Resources/Dialogues/Bob.json b/HH Prototype/Assets/VIDE/Resources/Dialogues/Bob.json
index fff4d9b..e3171cf 100644
--- a/HH Prototype/Assets/VIDE/Resources/Dialogues/Bob.json	
+++ b/HH Prototype/Assets/VIDE/Resources/Dialogues/Bob.json	
@@ -1 +1 @@
-{"dID":69831,"npcDiags":5,"playerDiags":3,"actionNodes":2,"startPoint":1,"pd_rect_0":[-31,52],"pd_comSize_0":1,"pd_ID_0":1,"pd_pTag_0":"","pd_0_com_0iSet":0,"pd_0_com_0oAns":1,"pd_0_com_0oAct":-1,"pd_0_com_0text":"Comment...","pd_0_com_0extraD":"","pd_rect_1":[-38,387],"pd_comSize_1":1,"pd_ID_1":4,"pd_pTag_1":"","pd_1_com_0iSet":1,"pd_1_com_0oAns":-1,"pd_1_com_0oAct":1,"pd_1_com_0text":"(\u0ca5\u203f\u0ca5) : But seeennnpppaaiiiiii!!!!","pd_1_com_0extraD":"","pd_rect_2":[-847,393],"pd_comSize_2":1,"pd_ID_2":7,"pd_pTag_2":"","pd_2_com_0iSet":-1,"pd_2_com_0oAns":2,"pd_2_com_0oAct":-1,"pd_2_com_0text":"(\u2299\u25bd\u2299) : Notice me senpai!","pd_2_com_0extraD":"","nd_rect_0":[-395,129],"nd_extraData_0":"","nd_tag_0":"Bob","nd_text_0":"Hi I'm bob","nd_ID_0":0,"nd_oSet_0":0,"nd_oNPC_0":-1,"nd_oAct_0":-1,"nd_rect_1":[391,19],"nd_extraData_1":"","nd_tag_1":"Bob","nd_text_1":"NPC's comment...","nd_ID_1":2,"nd_oSet_1":-1,"nd_oNPC_1":-1,"nd_oAct_1":0,"nd_rect_2":[-412,387],"nd_extraData_2":"","nd_tag_2":"Bob","nd_text_2":"(\u0ca0\u76ca\u0ca0) : No you little shit!","nd_ID_2":3,"nd_oSet_2":1,"nd_oNPC_2":-1,"nd_oAct_2":-1,"nd_rect_3":[708,354],"nd_extraData_3":"","nd_tag_3":"Bob","nd_text_3":"Fine.. Go make some money.","nd_ID_3":8,"nd_oSet_3":-1,"nd_oNPC_3":-1,"nd_oAct_3":-1,"nd_rect_4":[102,213],"nd_extraData_4":"","nd_tag_4":"Bob","nd_text_4":"*Bob doesn't seem to notice you*","nd_ID_4":9,"nd_oSet_4":-1,"nd_oNPC_4":-1,"nd_oAct_4":-1,"ac_rect_0":[749,111],"ac_ID_0":5,"ac_pause_0":false,"ac_goName_0":"Bob","ac_nIndex_0":41,"ac_optsCount_0":4,"ac_opts_0_0":"[No method]","ac_opts_1_0":"ChangeConversationStartNode","ac_opts_2_0":"GetAssigned","ac_opts_3_0":"AssignNew","ac_namesCount_0":63,"ac_names_0_0":"[No object]","ac_names_1_0":"Axe","ac_names_2_0":"Wood","ac_names_3_0":"DisplayItem","ac_names_4_0":"DisplayItem","ac_names_5_0":"Shovel","ac_names_6_0":"Blueprint","ac_names_7_0":"NoticeBoard Prototype","ac_names_8_0":"Wood (1)","ac_names_9_0":"NoticeBobSenpai","ac_names_10_0":"TalkToMountain","ac_names_11_0":"FarmForJimmy","ac_names_12_0":"DisplayItem","ac_names_13_0":"Bucket","ac_names_14_0":"Pine_Tree1(Collider) (34)","ac_names_15_0":"Pine_Tree1(Collider) (9)","ac_names_16_0":"Pine_Tree1(Collider) (12)","ac_names_17_0":"Pine_Tree1(Collider) (7)","ac_names_18_0":"Pine_Tree1(Collider) (17)","ac_names_19_0":"Pine_Tree1(Collider) (40)","ac_names_20_0":"Pine_Tree1(Collider) (25)","ac_names_21_0":"Pine_Tree1(Collider) (1)","ac_names_22_0":"Pine_Tree1(Collider) (6)","ac_names_23_0":"Pine_Tree1(Collider) (16)","ac_names_24_0":"Pine_Tree1(Collider) (29)","ac_names_25_0":"Pine_Tree1(Collider) (18)","ac_names_26_0":"Pine_Tree1(Collider) (23)","ac_names_27_0":"Pine_Tree1(Collider) (32)","ac_names_28_0":"Pine_Tree1(Collider) (30)","ac_names_29_0":"Pine_Tree1(Collider) (3)","ac_names_30_0":"Pine_Tree1(Collider)","ac_names_31_0":"Pine_Tree1(Collider) (21)","ac_names_32_0":"dialogueUI","ac_names_33_0":"Pine_Tree1(Collider) (35)","ac_names_34_0":"Pine_Tree1(Collider) (14)","ac_names_35_0":"Pine_Tree1(Collider) (28)","ac_names_36_0":"Pine_Tree1(Collider) (4)","ac_names_37_0":"Pine_Tree1(Collider) (20)","ac_names_38_0":"Player","ac_names_39_0":"Pine_Tree1(Collider) (13)","ac_names_40_0":"Pine_Tree1(Collider) (31)","ac_names_41_0":"Bob","ac_names_42_0":"Pine_Tree1(Collider) (15)","ac_names_43_0":"Pine_Tree1(Collider) (36)","ac_names_44_0":"Pine_Tree1(Collider) (19)","ac_names_45_0":"Mountain Man","ac_names_46_0":"Pine_Tree1(Collider) (37)","ac_names_47_0":"Pine_Tree1(Collider) (26)","ac_names_48_0":"Pine_Tree1(Collider) (24)","ac_names_49_0":"Pine_Tree1(Collider) (10)","ac_names_50_0":"Pine_Tree1(Collider) (39)","ac_names_51_0":"Pine_Tree1(Collider) (38)","ac_names_52_0":"Manager","ac_names_53_0":"Hand","ac_names_54_0":"Pine_Tree1(Collider) (11)","ac_names_55_0":"Jimmy","ac_names_56_0":"Scythe","ac_names_57_0":"Pine_Tree1(Collider) (27)","ac_names_58_0":"Pine_Tree1(Collider) (2)","ac_names_59_0":"Pine_Tree1(Collider) (8)","ac_names_60_0":"Pine_Tree1(Collider) (33)","ac_names_61_0":"Pine_Tree1(Collider) (5)","ac_names_62_0":"Pine_Tree1(Collider) (22)","ac_methCount_0":0,"ac_meth_0":"ChangeConversationStartNode","ac_paramT_0":3,"ac_methIndex_0":1,"ac_pString_0":"","ac_pBool_0":false,"ac_pInt_0":9,"ac_pFloat_0":0,"ac_oSet_0":-1,"ac_oNPC_0":-1,"ac_oAct_0":-1,"ac_rect_1":[403,355],"ac_ID_1":6,"ac_pause_1":false,"ac_goName_1":"NoticeBobSenpai","ac_nIndex_1":9,"ac_optsCount_1":11,"ac_opts_0_1":"[No method]","ac_opts_1_1":"StartQuest","ac_opts_2_1":"ActivateObjective","ac_opts_3_1":"NextObjective","ac_opts_4_1":"GenerateRewards","ac_opts_5_1":"CompleteTalkObjective","ac_opts_6_1":"ActivateObjective","ac_opts_7_1":"DectivateObjective","ac_opts_8_1":"GenerateReward","ac_opts_9_1":"ActivateObjective","ac_opts_10_1":"DectivateObjective","ac_namesCount_1":63,"ac_names_0_1":"[No object]","ac_names_1_1":"Axe","ac_names_2_1":"Wood","ac_names_3_1":"DisplayItem","ac_names_4_1":"DisplayItem","ac_names_5_1":"Shovel","ac_names_6_1":"Blueprint","ac_names_7_1":"NoticeBoard Prototype","ac_names_8_1":"Wood (1)","ac_names_9_1":"NoticeBobSenpai","ac_names_10_1":"TalkToMountain","ac_names_11_1":"FarmForJimmy","ac_names_12_1":"DisplayItem","ac_names_13_1":"Bucket","ac_names_14_1":"Pine_Tree1(Collider) (34)","ac_names_15_1":"Pine_Tree1(Collider) (9)","ac_names_16_1":"Pine_Tree1(Collider) (12)","ac_names_17_1":"Pine_Tree1(Collider) (7)","ac_names_18_1":"Pine_Tree1(Collider) (17)","ac_names_19_1":"Pine_Tree1(Collider) (40)","ac_names_20_1":"Pine_Tree1(Collider) (25)","ac_names_21_1":"Pine_Tree1(Collider) (1)","ac_names_22_1":"Pine_Tree1(Collider) (6)","ac_names_23_1":"Pine_Tree1(Collider) (16)","ac_names_24_1":"Pine_Tree1(Collider) (29)","ac_names_25_1":"Pine_Tree1(Collider) (18)","ac_names_26_1":"Pine_Tree1(Collider) (23)","ac_names_27_1":"Pine_Tree1(Collider) (32)","ac_names_28_1":"Pine_Tree1(Collider) (30)","ac_names_29_1":"Pine_Tree1(Collider) (3)","ac_names_30_1":"Pine_Tree1(Collider)","ac_names_31_1":"Pine_Tree1(Collider) (21)","ac_names_32_1":"dialogueUI","ac_names_33_1":"Pine_Tree1(Collider) (35)","ac_names_34_1":"Pine_Tree1(Collider) (14)","ac_names_35_1":"Pine_Tree1(Collider) (28)","ac_names_36_1":"Pine_Tree1(Collider) (4)","ac_names_37_1":"Pine_Tree1(Collider) (20)","ac_names_38_1":"Player","ac_names_39_1":"Pine_Tree1(Collider) (13)","ac_names_40_1":"Pine_Tree1(Collider) (31)","ac_names_41_1":"Bob","ac_names_42_1":"Pine_Tree1(Collider) (15)","ac_names_43_1":"Pine_Tree1(Collider) (36)","ac_names_44_1":"Pine_Tree1(Collider) (19)","ac_names_45_1":"Mountain Man","ac_names_46_1":"Pine_Tree1(Collider) (37)","ac_names_47_1":"Pine_Tree1(Collider) (26)","ac_names_48_1":"Pine_Tree1(Collider) (24)","ac_names_49_1":"Pine_Tree1(Collider) (10)","ac_names_50_1":"Pine_Tree1(Collider) (39)","ac_names_51_1":"Pine_Tree1(Collider) (38)","ac_names_52_1":"Manager","ac_names_53_1":"Hand","ac_names_54_1":"Pine_Tree1(Collider) (11)","ac_names_55_1":"Jimmy","ac_names_56_1":"Scythe","ac_names_57_1":"Pine_Tree1(Collider) (27)","ac_names_58_1":"Pine_Tree1(Collider) (2)","ac_names_59_1":"Pine_Tree1(Collider) (8)","ac_names_60_1":"Pine_Tree1(Collider) (33)","ac_names_61_1":"Pine_Tree1(Collider) (5)","ac_names_62_1":"Pine_Tree1(Collider) (22)","ac_methCount_1":0,"ac_meth_1":"CompleteTalkObjective","ac_paramT_1":0,"ac_methIndex_1":5,"ac_pString_1":"","ac_pBool_1":false,"ac_pInt_1":0,"ac_pFloat_1":0,"ac_oSet_1":-1,"ac_oNPC_1":3,"ac_oAct_1":-1}
\ No newline at end of file
+{"dID":69831,"npcDiags":5,"playerDiags":3,"actionNodes":3,"startPoint":1,"pd_rect_0":[-110,-119],"pd_comSize_0":1,"pd_ID_0":1,"pd_pTag_0":"","pd_0_com_0iSet":0,"pd_0_com_0oAns":1,"pd_0_com_0oAct":-1,"pd_0_com_0text":"Comment...","pd_0_com_0extraD":"","pd_rect_1":[-117,216],"pd_comSize_1":1,"pd_ID_1":4,"pd_pTag_1":"","pd_1_com_0iSet":1,"pd_1_com_0oAns":-1,"pd_1_com_0oAct":1,"pd_1_com_0text":"(\u0ca5\u203f\u0ca5) : But seeennnpppaaiiiiii!!!!","pd_1_com_0extraD":"","pd_rect_2":[-926,222],"pd_comSize_2":1,"pd_ID_2":7,"pd_pTag_2":"","pd_2_com_0iSet":-1,"pd_2_com_0oAns":2,"pd_2_com_0oAct":-1,"pd_2_com_0text":"(\u2299\u25bd\u2299) : Notice me senpai!","pd_2_com_0extraD":"","nd_rect_0":[-474,-42],"nd_extraData_0":"","nd_tag_0":"Bob","nd_text_0":"Hi I'm bob","nd_ID_0":0,"nd_oSet_0":0,"nd_oNPC_0":-1,"nd_oAct_0":-1,"nd_rect_1":[312,-152],"nd_extraData_1":"","nd_tag_1":"Bob","nd_text_1":"NPC's comment...","nd_ID_1":2,"nd_oSet_1":-1,"nd_oNPC_1":-1,"nd_oAct_1":0,"nd_rect_2":[-491,216],"nd_extraData_2":"","nd_tag_2":"Bob","nd_text_2":"(\u0ca0\u76ca\u0ca0) : No you little shit!","nd_ID_2":3,"nd_oSet_2":1,"nd_oNPC_2":-1,"nd_oAct_2":-1,"nd_rect_3":[918,157],"nd_extraData_3":"","nd_tag_3":"Bob","nd_text_3":"Fine.. Go make some money.","nd_ID_3":8,"nd_oSet_3":-1,"nd_oNPC_3":-1,"nd_oAct_3":-1,"nd_rect_4":[23,42],"nd_extraData_4":"","nd_tag_4":"Bob","nd_text_4":"*Bob doesn't seem to notice you*","nd_ID_4":9,"nd_oSet_4":-1,"nd_oNPC_4":-1,"nd_oAct_4":-1,"ac_rect_0":[670,-60],"ac_ID_0":5,"ac_pause_0":false,"ac_goName_0":"Bob","ac_nIndex_0":41,"ac_optsCount_0":4,"ac_opts_0_0":"[No method]","ac_opts_1_0":"ChangeConversationStartNode","ac_opts_2_0":"GetAssigned","ac_opts_3_0":"AssignNew","ac_namesCount_0":63,"ac_names_0_0":"[No object]","ac_names_1_0":"Axe","ac_names_2_0":"Wood","ac_names_3_0":"DisplayItem","ac_names_4_0":"DisplayItem","ac_names_5_0":"Shovel","ac_names_6_0":"Blueprint","ac_names_7_0":"NoticeBoard Prototype","ac_names_8_0":"Wood (1)","ac_names_9_0":"NoticeBobSenpai","ac_names_10_0":"TalkToMountain","ac_names_11_0":"FarmForJimmy","ac_names_12_0":"DisplayItem","ac_names_13_0":"Bucket","ac_names_14_0":"Pine_Tree1(Collider) (34)","ac_names_15_0":"Pine_Tree1(Collider) (9)","ac_names_16_0":"Pine_Tree1(Collider) (12)","ac_names_17_0":"Pine_Tree1(Collider) (7)","ac_names_18_0":"Pine_Tree1(Collider) (17)","ac_names_19_0":"Pine_Tree1(Collider) (40)","ac_names_20_0":"Pine_Tree1(Collider) (25)","ac_names_21_0":"Pine_Tree1(Collider) (1)","ac_names_22_0":"Pine_Tree1(Collider) (6)","ac_names_23_0":"Pine_Tree1(Collider) (16)","ac_names_24_0":"Pine_Tree1(Collider) (29)","ac_names_25_0":"Pine_Tree1(Collider) (18)","ac_names_26_0":"Pine_Tree1(Collider) (23)","ac_names_27_0":"Pine_Tree1(Collider) (32)","ac_names_28_0":"Pine_Tree1(Collider) (30)","ac_names_29_0":"Pine_Tree1(Collider) (3)","ac_names_30_0":"Pine_Tree1(Collider)","ac_names_31_0":"Pine_Tree1(Collider) (21)","ac_names_32_0":"dialogueUI","ac_names_33_0":"Pine_Tree1(Collider) (35)","ac_names_34_0":"Pine_Tree1(Collider) (14)","ac_names_35_0":"Pine_Tree1(Collider) (28)","ac_names_36_0":"Pine_Tree1(Collider) (4)","ac_names_37_0":"Pine_Tree1(Collider) (20)","ac_names_38_0":"Player","ac_names_39_0":"Pine_Tree1(Collider) (13)","ac_names_40_0":"Pine_Tree1(Collider) (31)","ac_names_41_0":"Bob","ac_names_42_0":"Pine_Tree1(Collider) (15)","ac_names_43_0":"Pine_Tree1(Collider) (36)","ac_names_44_0":"Pine_Tree1(Collider) (19)","ac_names_45_0":"Mountain Man","ac_names_46_0":"Pine_Tree1(Collider) (37)","ac_names_47_0":"Pine_Tree1(Collider) (26)","ac_names_48_0":"Pine_Tree1(Collider) (24)","ac_names_49_0":"Pine_Tree1(Collider) (10)","ac_names_50_0":"Pine_Tree1(Collider) (39)","ac_names_51_0":"Pine_Tree1(Collider) (38)","ac_names_52_0":"Manager","ac_names_53_0":"Hand","ac_names_54_0":"Pine_Tree1(Collider) (11)","ac_names_55_0":"Jimmy","ac_names_56_0":"Scythe","ac_names_57_0":"Pine_Tree1(Collider) (27)","ac_names_58_0":"Pine_Tree1(Collider) (2)","ac_names_59_0":"Pine_Tree1(Collider) (8)","ac_names_60_0":"Pine_Tree1(Collider) (33)","ac_names_61_0":"Pine_Tree1(Collider) (5)","ac_names_62_0":"Pine_Tree1(Collider) (22)","ac_methCount_0":0,"ac_meth_0":"ChangeConversationStartNode","ac_paramT_0":3,"ac_methIndex_0":1,"ac_pString_0":"","ac_pBool_0":false,"ac_pInt_0":9,"ac_pFloat_0":0,"ac_oSet_0":-1,"ac_oNPC_0":-1,"ac_oAct_0":-1,"ac_rect_1":[324,184],"ac_ID_1":6,"ac_pause_1":false,"ac_goName_1":"NoticeBobSenpai","ac_nIndex_1":9,"ac_optsCount_1":11,"ac_opts_0_1":"[No method]","ac_opts_1_1":"StartQuest","ac_opts_2_1":"ActivateObjective","ac_opts_3_1":"NextObjective","ac_opts_4_1":"GenerateRewards","ac_opts_5_1":"CompleteTalkObjective","ac_opts_6_1":"ActivateObjective","ac_opts_7_1":"DectivateObjective","ac_opts_8_1":"GenerateReward","ac_opts_9_1":"ActivateObjective","ac_opts_10_1":"DectivateObjective","ac_namesCount_1":63,"ac_names_0_1":"[No object]","ac_names_1_1":"Axe","ac_names_2_1":"Wood","ac_names_3_1":"DisplayItem","ac_names_4_1":"DisplayItem","ac_names_5_1":"Shovel","ac_names_6_1":"Blueprint","ac_names_7_1":"NoticeBoard Prototype","ac_names_8_1":"Wood (1)","ac_names_9_1":"NoticeBobSenpai","ac_names_10_1":"TalkToMountain","ac_names_11_1":"FarmForJimmy","ac_names_12_1":"DisplayItem","ac_names_13_1":"Bucket","ac_names_14_1":"Pine_Tree1(Collider) (34)","ac_names_15_1":"Pine_Tree1(Collider) (9)","ac_names_16_1":"Pine_Tree1(Collider) (12)","ac_names_17_1":"Pine_Tree1(Collider) (7)","ac_names_18_1":"Pine_Tree1(Collider) (17)","ac_names_19_1":"Pine_Tree1(Collider) (40)","ac_names_20_1":"Pine_Tree1(Collider) (25)","ac_names_21_1":"Pine_Tree1(Collider) (1)","ac_names_22_1":"Pine_Tree1(Collider) (6)","ac_names_23_1":"Pine_Tree1(Collider) (16)","ac_names_24_1":"Pine_Tree1(Collider) (29)","ac_names_25_1":"Pine_Tree1(Collider) (18)","ac_names_26_1":"Pine_Tree1(Collider) (23)","ac_names_27_1":"Pine_Tree1(Collider) (32)","ac_names_28_1":"Pine_Tree1(Collider) (30)","ac_names_29_1":"Pine_Tree1(Collider) (3)","ac_names_30_1":"Pine_Tree1(Collider)","ac_names_31_1":"Pine_Tree1(Collider) (21)","ac_names_32_1":"dialogueUI","ac_names_33_1":"Pine_Tree1(Collider) (35)","ac_names_34_1":"Pine_Tree1(Collider) (14)","ac_names_35_1":"Pine_Tree1(Collider) (28)","ac_names_36_1":"Pine_Tree1(Collider) (4)","ac_names_37_1":"Pine_Tree1(Collider) (20)","ac_names_38_1":"Player","ac_names_39_1":"Pine_Tree1(Collider) (13)","ac_names_40_1":"Pine_Tree1(Collider) (31)","ac_names_41_1":"Bob","ac_names_42_1":"Pine_Tree1(Collider) (15)","ac_names_43_1":"Pine_Tree1(Collider) (36)","ac_names_44_1":"Pine_Tree1(Collider) (19)","ac_names_45_1":"Mountain Man","ac_names_46_1":"Pine_Tree1(Collider) (37)","ac_names_47_1":"Pine_Tree1(Collider) (26)","ac_names_48_1":"Pine_Tree1(Collider) (24)","ac_names_49_1":"Pine_Tree1(Collider) (10)","ac_names_50_1":"Pine_Tree1(Collider) (39)","ac_names_51_1":"Pine_Tree1(Collider) (38)","ac_names_52_1":"Manager","ac_names_53_1":"Hand","ac_names_54_1":"Pine_Tree1(Collider) (11)","ac_names_55_1":"Jimmy","ac_names_56_1":"Scythe","ac_names_57_1":"Pine_Tree1(Collider) (27)","ac_names_58_1":"Pine_Tree1(Collider) (2)","ac_names_59_1":"Pine_Tree1(Collider) (8)","ac_names_60_1":"Pine_Tree1(Collider) (33)","ac_names_61_1":"Pine_Tree1(Collider) (5)","ac_names_62_1":"Pine_Tree1(Collider) (22)","ac_methCount_1":0,"ac_meth_1":"CompleteTalkObjective","ac_paramT_1":0,"ac_methIndex_1":5,"ac_pString_1":"","ac_pBool_1":false,"ac_pInt_1":0,"ac_pFloat_1":0,"ac_oSet_1":-1,"ac_oNPC_1":-1,"ac_oAct_1":2,"ac_rect_2":[623,176],"ac_ID_2":10,"ac_pause_2":false,"ac_goName_2":"Old Dan","ac_nIndex_2":38,"ac_optsCount_2":5,"ac_opts_0_2":"[No method]","ac_opts_1_2":"ChangeConversationStartNode","ac_opts_2_2":"AddArousal","ac_opts_3_2":"GetAssigned","ac_opts_4_2":"AssignNew","ac_namesCount_2":75,"ac_names_0_2":"[No object]","ac_names_1_2":"Cube","ac_names_2_2":"Cube","ac_names_3_2":"Button1 (1)","ac_names_4_2":"Button1","ac_names_5_2":"CraftingBench","ac_names_6_2":"Axe","ac_names_7_2":"Wood","ac_names_8_2":"Pickaxe","ac_names_9_2":"DisplayItem","ac_names_10_2":"Pine_Tree1(Collider) (2)","ac_names_11_2":"DisplayItem","ac_names_12_2":"CraftingMenu","ac_names_13_2":"Shovel","ac_names_14_2":"NoticeBoard Prototype","ac_names_15_2":"DisplayItem","ac_names_16_2":"Pine_Tree1(Collider) (40)","ac_names_17_2":"Scythe","ac_names_18_2":"Wood (1)","ac_names_19_2":"BuildAWall","ac_names_20_2":"NoticeBobSenpai","ac_names_21_2":"TalkToMountain","ac_names_22_2":"FarmForJimmy","ac_names_23_2":"DisplayItem","ac_names_24_2":"Pine_Tree1(Collider) (7)","ac_names_25_2":"Pine_Tree1(Collider) (37)","ac_names_26_2":"Bucket","ac_names_27_2":"Pine_Tree1(Collider) (34)","ac_names_28_2":"Pine_Tree1(Collider) (9)","ac_names_29_2":"Pine_Tree1(Collider) (12)","ac_names_30_2":"Pine_Tree1(Collider) (17)","ac_names_31_2":"Pine_Tree1(Collider) (25)","ac_names_32_2":"Pine_Tree1(Collider) (1)","ac_names_33_2":"Pine_Tree1(Collider) (6)","ac_names_34_2":"Pine_Tree1(Collider) (16)","ac_names_35_2":"Pine_Tree1(Collider) (29)","ac_names_36_2":"Pine_Tree1(Collider) (18)","ac_names_37_2":"Pine_Tree1(Collider) (23)","ac_names_38_2":"Old Dan","ac_names_39_2":"Pine_Tree1(Collider) (32)","ac_names_40_2":"Pine_Tree1(Collider) (30)","ac_names_41_2":"Pine_Tree1(Collider) (3)","ac_names_42_2":"Pine_Tree1(Collider)","ac_names_43_2":"Pine_Tree1(Collider) (21)","ac_names_44_2":"dialogueUI","ac_names_45_2":"Pine_Tree1(Collider) (35)","ac_names_46_2":"Pine_Tree1(Collider) (14)","ac_names_47_2":"Pine_Tree1(Collider) (28)","ac_names_48_2":"Pine_Tree1(Collider) (4)","ac_names_49_2":"Pine_Tree1(Collider) (20)","ac_names_50_2":"Rock07_MESH_01","ac_names_51_2":"Player","ac_names_52_2":"Pine_Tree1(Collider) (13)","ac_names_53_2":"Rock05_MESH_01","ac_names_54_2":"Pine_Tree1(Collider) (31)","ac_names_55_2":"Bob","ac_names_56_2":"BuildASecondWall","ac_names_57_2":"Pine_Tree1(Collider) (15)","ac_names_58_2":"Pine_Tree1(Collider) (36)","ac_names_59_2":"Pine_Tree1(Collider) (19)","ac_names_60_2":"Mountain Man","ac_names_61_2":"Pine_Tree1(Collider) (26)","ac_names_62_2":"Pine_Tree1(Collider) (24)","ac_names_63_2":"Pine_Tree1(Collider) (10)","ac_names_64_2":"Pine_Tree1(Collider) (39)","ac_names_65_2":"Pine_Tree1(Collider) (38)","ac_names_66_2":"Manager","ac_names_67_2":"Pine_Tree1(Collider) (11)","ac_names_68_2":"Jimmy","ac_names_69_2":"Pine_Tree1(Collider) (27)","ac_names_70_2":"Pine_Tree1(Collider) (8)","ac_names_71_2":"Rock01_MESH_01","ac_names_72_2":"Pine_Tree1(Collider) (33)","ac_names_73_2":"Pine_Tree1(Collider) (5)","ac_names_74_2":"Pine_Tree1(Collider) (22)","ac_methCount_2":172,"ac_meth_key_2_0":"Cube0","ac_meth_val_2_0":"ActivateButton","ac_meth_key_2_1":"Button1 (1)0","ac_meth_val_2_1":"ActivateButton","ac_meth_key_2_2":"Button10","ac_meth_val_2_2":"ActivateButton","ac_meth_key_2_3":"CraftingBench0","ac_meth_val_2_3":"DisplayRecipeChoice","ac_meth_key_2_4":"CraftingBench1","ac_meth_val_2_4":"NextRecipeChoice","ac_meth_key_2_5":"CraftingBench2","ac_meth_val_2_5":"PreviousRecipeChocie","ac_meth_key_2_6":"CraftingBench3","ac_meth_val_2_6":"MakeItem","ac_meth_key_2_7":"Axe0","ac_meth_val_2_7":"PrimaryUse","ac_meth_key_2_8":"Wood0","ac_meth_val_2_8":"PrimaryUse","ac_meth_key_2_9":"Wood1","ac_meth_val_2_9":"SecondaryUse","ac_meth_key_2_10":"Wood2","ac_meth_val_2_10":"UpdateMesh","ac_meth_key_2_11":"Wood3","ac_meth_val_2_11":"IncreaseQuantity","ac_meth_key_2_12":"Wood4","ac_meth_val_2_12":"IncreaseQuantity","ac_meth_key_2_13":"Wood5","ac_meth_val_2_13":"DecreaseQuantity","ac_meth_key_2_14":"Wood6","ac_meth_val_2_14":"DecreaseQuantity","ac_meth_key_2_15":"Pickaxe0","ac_meth_val_2_15":"PrimaryUse","ac_meth_key_2_16":"DisplayItem0","ac_meth_val_2_16":"ShopDisplay","ac_meth_key_2_17":"Pine_Tree1(Collider) (2)0","ac_meth_val_2_17":"Harvest","ac_meth_key_2_18":"CraftingMenu0","ac_meth_val_2_18":"GetRecipeList","ac_meth_key_2_19":"CraftingMenu1","ac_meth_val_2_19":"UpdateDisplay","ac_meth_key_2_20":"CraftingMenu2","ac_meth_val_2_20":"ResetDisplay","ac_meth_key_2_21":"CraftingMenu3","ac_meth_val_2_21":"ActivateMenu","ac_meth_key_2_22":"CraftingMenu4","ac_meth_val_2_22":"DeactivateMenu","ac_meth_key_2_23":"CraftingMenu5","ac_meth_val_2_23":"SelectButton","ac_meth_key_2_24":"CraftingMenu6","ac_meth_val_2_24":"UpdateSelectedItemInfo","ac_meth_key_2_25":"CraftingMenu7","ac_meth_val_2_25":"RemoveButtons","ac_meth_key_2_26":"CraftingMenu8","ac_meth_val_2_26":"CreateSelectedItem","ac_meth_key_2_27":"CraftingMenu9","ac_meth_val_2_27":"ResortLists","ac_meth_key_2_28":"Shovel0","ac_meth_val_2_28":"PrimaryUse","ac_meth_key_2_29":"NoticeBoard Prototype0","ac_meth_val_2_29":"GetRandomQuest","ac_meth_key_2_30":"Pine_Tree1(Collider) (40)0","ac_meth_val_2_30":"Harvest","ac_meth_key_2_31":"Scythe0","ac_meth_val_2_31":"PrimaryUse","ac_meth_key_2_32":"Wood (1)0","ac_meth_val_2_32":"PrimaryUse","ac_meth_key_2_33":"Wood (1)1","ac_meth_val_2_33":"SecondaryUse","ac_meth_key_2_34":"Wood (1)2","ac_meth_val_2_34":"UpdateMesh","ac_meth_key_2_35":"Wood (1)3","ac_meth_val_2_35":"IncreaseQuantity","ac_meth_key_2_36":"Wood (1)4","ac_meth_val_2_36":"IncreaseQuantity","ac_meth_key_2_37":"Wood (1)5","ac_meth_val_2_37":"DecreaseQuantity","ac_meth_key_2_38":"Wood (1)6","ac_meth_val_2_38":"DecreaseQuantity","ac_meth_key_2_39":"BuildAWall0","ac_meth_val_2_39":"StartQuest","ac_meth_key_2_40":"BuildAWall1","ac_meth_val_2_40":"ActivateObjective","ac_meth_key_2_41":"BuildAWall2","ac_meth_val_2_41":"NextObjective","ac_meth_key_2_42":"BuildAWall3","ac_meth_val_2_42":"GenerateRewards","ac_meth_key_2_43":"BuildAWall4","ac_meth_val_2_43":"CompleteTalkObjective","ac_meth_key_2_44":"BuildAWall5","ac_meth_val_2_44":"ActivateObjective","ac_meth_key_2_45":"BuildAWall6","ac_meth_val_2_45":"DectivateObjective","ac_meth_key_2_46":"BuildAWall7","ac_meth_val_2_46":"ActivateObjective","ac_meth_key_2_47":"BuildAWall8","ac_meth_val_2_47":"DectivateObjective","ac_meth_key_2_48":"BuildAWall9","ac_meth_val_2_48":"ActivateObjective","ac_meth_key_2_49":"BuildAWall10","ac_meth_val_2_49":"DectivateObjective","ac_meth_key_2_50":"NoticeBobSenpai0","ac_meth_val_2_50":"StartQuest","ac_meth_key_2_51":"NoticeBobSenpai1","ac_meth_val_2_51":"ActivateObjective","ac_meth_key_2_52":"NoticeBobSenpai2","ac_meth_val_2_52":"NextObjective","ac_meth_key_2_53":"NoticeBobSenpai3","ac_meth_val_2_53":"GenerateRewards","ac_meth_key_2_54":"NoticeBobSenpai4","ac_meth_val_2_54":"CompleteTalkObjective","ac_meth_key_2_55":"NoticeBobSenpai5","ac_meth_val_2_55":"ActivateObjective","ac_meth_key_2_56":"NoticeBobSenpai6","ac_meth_val_2_56":"DectivateObjective","ac_meth_key_2_57":"NoticeBobSenpai7","ac_meth_val_2_57":"GenerateReward","ac_meth_key_2_58":"NoticeBobSenpai8","ac_meth_val_2_58":"ActivateObjective","ac_meth_key_2_59":"NoticeBobSenpai9","ac_meth_val_2_59":"DectivateObjective","ac_meth_key_2_60":"TalkToMountain0","ac_meth_val_2_60":"StartQuest","ac_meth_key_2_61":"TalkToMountain1","ac_meth_val_2_61":"ActivateObjective","ac_meth_key_2_62":"TalkToMountain2","ac_meth_val_2_62":"NextObjective","ac_meth_key_2_63":"TalkToMountain3","ac_meth_val_2_63":"GenerateRewards","ac_meth_key_2_64":"TalkToMountain4","ac_meth_val_2_64":"CompleteTalkObjective","ac_meth_key_2_65":"TalkToMountain5","ac_meth_val_2_65":"ActivateObjective","ac_meth_key_2_66":"TalkToMountain6","ac_meth_val_2_66":"DectivateObjective","ac_meth_key_2_67":"TalkToMountain7","ac_meth_val_2_67":"GenerateReward","ac_meth_key_2_68":"FarmForJimmy0","ac_meth_val_2_68":"StartQuest","ac_meth_key_2_69":"FarmForJimmy1","ac_meth_val_2_69":"ActivateObjective","ac_meth_key_2_70":"FarmForJimmy2","ac_meth_val_2_70":"NextObjective","ac_meth_key_2_71":"FarmForJimmy3","ac_meth_val_2_71":"GenerateRewards","ac_meth_key_2_72":"FarmForJimmy4","ac_meth_val_2_72":"CompleteTalkObjective","ac_meth_key_2_73":"FarmForJimmy5","ac_meth_val_2_73":"ActivateObjective","ac_meth_key_2_74":"FarmForJimmy6","ac_meth_val_2_74":"DectivateObjective","ac_meth_key_2_75":"FarmForJimmy7","ac_meth_val_2_75":"ActivateObjective","ac_meth_key_2_76":"FarmForJimmy8","ac_meth_val_2_76":"DectivateObjective","ac_meth_key_2_77":"FarmForJimmy9","ac_meth_val_2_77":"ActivateObjective","ac_meth_key_2_78":"FarmForJimmy10","ac_meth_val_2_78":"DectivateObjective","ac_meth_key_2_79":"FarmForJimmy11","ac_meth_val_2_79":"GenerateReward","ac_meth_key_2_80":"Pine_Tree1(Collider) (7)0","ac_meth_val_2_80":"Harvest","ac_meth_key_2_81":"Pine_Tree1(Collider) (37)0","ac_meth_val_2_81":"Harvest","ac_meth_key_2_82":"Bucket0","ac_meth_val_2_82":"PrimaryUse","ac_meth_key_2_83":"Pine_Tree1(Collider) (34)0","ac_meth_val_2_83":"Harvest","ac_meth_key_2_84":"Pine_Tree1(Collider) (9)0","ac_meth_val_2_84":"Harvest","ac_meth_key_2_85":"Pine_Tree1(Collider) (12)0","ac_meth_val_2_85":"Harvest","ac_meth_key_2_86":"Pine_Tree1(Collider) (17)0","ac_meth_val_2_86":"Harvest","ac_meth_key_2_87":"Pine_Tree1(Collider) (25)0","ac_meth_val_2_87":"Harvest","ac_meth_key_2_88":"Pine_Tree1(Collider) (1)0","ac_meth_val_2_88":"Harvest","ac_meth_key_2_89":"Pine_Tree1(Collider) (6)0","ac_meth_val_2_89":"Harvest","ac_meth_key_2_90":"Pine_Tree1(Collider) (16)0","ac_meth_val_2_90":"Harvest","ac_meth_key_2_91":"Pine_Tree1(Collider) (29)0","ac_meth_val_2_91":"Harvest","ac_meth_key_2_92":"Pine_Tree1(Collider) (18)0","ac_meth_val_2_92":"Harvest","ac_meth_key_2_93":"Pine_Tree1(Collider) (23)0","ac_meth_val_2_93":"Harvest","ac_meth_key_2_94":"Old Dan0","ac_meth_val_2_94":"ChangeConversationStartNode","ac_meth_key_2_95":"Old Dan1","ac_meth_val_2_95":"AddArousal","ac_meth_key_2_96":"Old Dan2","ac_meth_val_2_96":"GetAssigned","ac_meth_key_2_97":"Old Dan3","ac_meth_val_2_97":"AssignNew","ac_meth_key_2_98":"Pine_Tree1(Collider) (32)0","ac_meth_val_2_98":"Harvest","ac_meth_key_2_99":"Pine_Tree1(Collider) (30)0","ac_meth_val_2_99":"Harvest","ac_meth_key_2_100":"Pine_Tree1(Collider) (3)0","ac_meth_val_2_100":"Harvest","ac_meth_key_2_101":"Pine_Tree1(Collider)0","ac_meth_val_2_101":"Harvest","ac_meth_key_2_102":"Pine_Tree1(Collider) (21)0","ac_meth_val_2_102":"Harvest","ac_meth_key_2_103":"dialogueUI0","ac_meth_val_2_103":"NextNode","ac_meth_key_2_104":"dialogueUI1","ac_meth_val_2_104":"UpdateUI","ac_meth_key_2_105":"dialogueUI2","ac_meth_val_2_105":"AnimateText","ac_meth_key_2_106":"dialogueUI3","ac_meth_val_2_106":"NextNode","ac_meth_key_2_107":"dialogueUI4","ac_meth_val_2_107":"UpdateUI","ac_meth_key_2_108":"dialogueUI5","ac_meth_val_2_108":"AnimateText","ac_meth_key_2_109":"Pine_Tree1(Collider) (35)0","ac_meth_val_2_109":"Harvest","ac_meth_key_2_110":"Pine_Tree1(Collider) (14)0","ac_meth_val_2_110":"Harvest","ac_meth_key_2_111":"Pine_Tree1(Collider) (28)0","ac_meth_val_2_111":"Harvest","ac_meth_key_2_112":"Pine_Tree1(Collider) (4)0","ac_meth_val_2_112":"Harvest","ac_meth_key_2_113":"Pine_Tree1(Collider) (20)0","ac_meth_val_2_113":"Harvest","ac_meth_key_2_114":"Rock07_MESH_010","ac_meth_val_2_114":"Harvest","ac_meth_key_2_115":"Player0","ac_meth_val_2_115":"RemoveItem","ac_meth_key_2_116":"Player1","ac_meth_val_2_116":"DestroyItem","ac_meth_key_2_117":"Player2","ac_meth_val_2_117":"DropAllofItem","ac_meth_key_2_118":"Player3","ac_meth_val_2_118":"UseItem","ac_meth_key_2_119":"Player4","ac_meth_val_2_119":"BlueprintIndex","ac_meth_key_2_120":"Player5","ac_meth_val_2_120":"HasBook","ac_meth_key_2_121":"Player6","ac_meth_val_2_121":"Hotkeys","ac_meth_key_2_122":"Pine_Tree1(Collider) (13)0","ac_meth_val_2_122":"Harvest","ac_meth_key_2_123":"Rock05_MESH_010","ac_meth_val_2_123":"Harvest","ac_meth_key_2_124":"Pine_Tree1(Collider) (31)0","ac_meth_val_2_124":"Harvest","ac_meth_key_2_125":"Bob0","ac_meth_val_2_125":"ChangeConversationStartNode","ac_meth_key_2_126":"Bob1","ac_meth_val_2_126":"AddArousal","ac_meth_key_2_127":"Bob2","ac_meth_val_2_127":"GetAssigned","ac_meth_key_2_128":"Bob3","ac_meth_val_2_128":"AssignNew","ac_meth_key_2_129":"BuildASecondWall0","ac_meth_val_2_129":"StartQuest","ac_meth_key_2_130":"BuildASecondWall1","ac_meth_val_2_130":"ActivateObjective","ac_meth_key_2_131":"BuildASecondWall2","ac_meth_val_2_131":"NextObjective","ac_meth_key_2_132":"BuildASecondWall3","ac_meth_val_2_132":"GenerateRewards","ac_meth_key_2_133":"BuildASecondWall4","ac_meth_val_2_133":"CompleteTalkObjective","ac_meth_key_2_134":"BuildASecondWall5","ac_meth_val_2_134":"CheckPrerequisiteMet","ac_meth_key_2_135":"BuildASecondWall6","ac_meth_val_2_135":"GenerateReward","ac_meth_key_2_136":"BuildASecondWall7","ac_meth_val_2_136":"ActivateObjective","ac_meth_key_2_137":"BuildASecondWall8","ac_meth_val_2_137":"DectivateObjective","ac_meth_key_2_138":"BuildASecondWall9","ac_meth_val_2_138":"ActivateObjective","ac_meth_key_2_139":"BuildASecondWall10","ac_meth_val_2_139":"DectivateObjective","ac_meth_key_2_140":"Pine_Tree1(Collider) (15)0","ac_meth_val_2_140":"Harvest","ac_meth_key_2_141":"Pine_Tree1(Collider) (36)0","ac_meth_val_2_141":"Harvest","ac_meth_key_2_142":"Pine_Tree1(Collider) (19)0","ac_meth_val_2_142":"Harvest","ac_meth_key_2_143":"Mountain Man0","ac_meth_val_2_143":"ChangeConversationStartNode","ac_meth_key_2_144":"Mountain Man1","ac_meth_val_2_144":"AddArousal","ac_meth_key_2_145":"Mountain Man2","ac_meth_val_2_145":"GetAssigned","ac_meth_key_2_146":"Mountain Man3","ac_meth_val_2_146":"AssignNew","ac_meth_key_2_147":"Pine_Tree1(Collider) (26)0","ac_meth_val_2_147":"Harvest","ac_meth_key_2_148":"Pine_Tree1(Collider) (24)0","ac_meth_val_2_148":"Harvest","ac_meth_key_2_149":"Pine_Tree1(Collider) (10)0","ac_meth_val_2_149":"Harvest","ac_meth_key_2_150":"Pine_Tree1(Collider) (39)0","ac_meth_val_2_150":"Harvest","ac_meth_key_2_151":"Pine_Tree1(Collider) (38)0","ac_meth_val_2_151":"Harvest","ac_meth_key_2_152":"Manager0","ac_meth_val_2_152":"UpdatePlants","ac_meth_key_2_153":"Manager1","ac_meth_val_2_153":"WaterPlants","ac_meth_key_2_154":"Manager2","ac_meth_val_2_154":"BedDayJump","ac_meth_key_2_155":"Manager3","ac_meth_val_2_155":"DayJump","ac_meth_key_2_156":"Manager4","ac_meth_val_2_156":"UpdateQuestText","ac_meth_key_2_157":"Manager5","ac_meth_val_2_157":"ChangeActiveQuest","ac_meth_key_2_158":"Manager6","ac_meth_val_2_158":"UpdateQuestText","ac_meth_key_2_159":"Manager7","ac_meth_val_2_159":"ChangeActiveQuest","ac_meth_key_2_160":"Manager8","ac_meth_val_2_160":"CheckTalkChat","ac_meth_key_2_161":"Pine_Tree1(Collider) (11)0","ac_meth_val_2_161":"Harvest","ac_meth_key_2_162":"Jimmy0","ac_meth_val_2_162":"ChangeConversationStartNode","ac_meth_key_2_163":"Jimmy1","ac_meth_val_2_163":"AddArousal","ac_meth_key_2_164":"Jimmy2","ac_meth_val_2_164":"GetAssigned","ac_meth_key_2_165":"Jimmy3","ac_meth_val_2_165":"AssignNew","ac_meth_key_2_166":"Pine_Tree1(Collider) (27)0","ac_meth_val_2_166":"Harvest","ac_meth_key_2_167":"Pine_Tree1(Collider) (8)0","ac_meth_val_2_167":"Harvest","ac_meth_key_2_168":"Rock01_MESH_010","ac_meth_val_2_168":"Harvest","ac_meth_key_2_169":"Pine_Tree1(Collider) (33)0","ac_meth_val_2_169":"Harvest","ac_meth_key_2_170":"Pine_Tree1(Collider) (5)0","ac_meth_val_2_170":"Harvest","ac_meth_key_2_171":"Pine_Tree1(Collider) (22)0","ac_meth_val_2_171":"Harvest","ac_meth_2":"AddArousal","ac_paramT_2":3,"ac_methIndex_2":2,"ac_pString_2":null,"ac_pBool_2":false,"ac_pInt_2":5,"ac_pFloat_2":0,"ac_oSet_2":-1,"ac_oNPC_2":3,"ac_oAct_2":-1}
\ No newline at end of file
